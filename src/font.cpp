#include <cstdarg>
#include <fstream>
#include <allegro5/allegro5.h>
#include "pacman.h"

namespace pacman
{
	struct font_t
	{
		int32_t m_start;
		int32_t m_count;
		bitmap_t** m_glyphs;
	};

	namespace font
	{
		struct glyph_t
		{
			bitmap_t* m_bitmap;
		};

		font_t* create_default()
		{
			static const uint8_t default_font_data[256][glyph::size] =
			{
				{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x7e, 0x81, 0xa5, 0x81, 0xbd, 0x99, 0x81, 0x7e},
				{ 0x7e, 0xff, 0xdb, 0xff, 0xc3, 0xe7, 0xff, 0x7e},
				{ 0x6c, 0xfe, 0xfe, 0xfe, 0x7c, 0x38, 0x10, 0x00},
				{ 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x38, 0x10, 0x00},
				{ 0x38, 0x7c, 0x38, 0xfe, 0xfe, 0xd6, 0x10, 0x38},
				{ 0x10, 0x10, 0x38, 0x7c, 0xfe, 0x7c, 0x10, 0x38},
				{ 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18, 0x00, 0x00},
				{ 0xff, 0xff, 0xe7, 0xc3, 0xc3, 0xe7, 0xff, 0xff},
				{ 0x00, 0x3c, 0x66, 0x42, 0x42, 0x66, 0x3c, 0x00},
				{ 0xff, 0xc3, 0x99, 0xbd, 0xbd, 0x99, 0xc3, 0xff},
				{ 0x0f, 0x07, 0x0f, 0x7d, 0xcc, 0xcc, 0xcc, 0x78},
				{ 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x7e, 0x18},
				{ 0x3f, 0x33, 0x3f, 0x30, 0x30, 0x70, 0xf0, 0xe0},
				{ 0x7f, 0x63, 0x7f, 0x63, 0x63, 0x67, 0xe6, 0xc0},
				{ 0x99, 0x5a, 0x3c, 0xe7, 0xe7, 0x3c, 0x5a, 0x99},
				{ 0x80, 0xe0, 0xf8, 0xfe, 0xf8, 0xe0, 0x80, 0x00},
				{ 0x02, 0x0e, 0x3e, 0xfe, 0x3e, 0x0e, 0x02, 0x00},
				{ 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x7e, 0x3c, 0x18},
				{ 0x66, 0x66, 0x66, 0x66, 0x66, 0x00, 0x66, 0x00},
				{ 0x7f, 0xdb, 0xdb, 0x7b, 0x1b, 0x1b, 0x1b, 0x00},
				{ 0x7e, 0xc3, 0x78, 0xcc, 0xcc, 0x78, 0x8c, 0xf8},
				{ 0x00, 0x00, 0x00, 0x00, 0x7e, 0x7e, 0x7e, 0x00},
				{ 0x18, 0x3c, 0x7e, 0x18, 0x7e, 0x3c, 0x18, 0xff},
				{ 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x00},
				{ 0x18, 0x18, 0x18, 0x18, 0x7e, 0x3c, 0x18, 0x00},
				{ 0x00, 0x18, 0x0c, 0xfe, 0x0c, 0x18, 0x00, 0x00},
				{ 0x00, 0x30, 0x60, 0xfe, 0x60, 0x30, 0x00, 0x00},
				{ 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xfe, 0x00, 0x00},
				{ 0x00, 0x24, 0x66, 0xff, 0x66, 0x24, 0x00, 0x00},
				{ 0x00, 0x18, 0x3c, 0x7e, 0xff, 0xff, 0x00, 0x00},
				{ 0x00, 0xff, 0xff, 0x7e, 0x3c, 0x18, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x30, 0x78, 0x78, 0x30, 0x30, 0x00, 0x30, 0x00},
				{ 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00},
				{ 0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00},
				{ 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00},
				{ 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00},
				{ 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00},
				{ 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00},
				{ 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00},
				{ 0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x30, 0x60},
				{ 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00},
				{ 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00},
				{ 0x78, 0xcc, 0xdc, 0xfc, 0xec, 0xcc, 0x78, 0x00},
				{ 0x30, 0xf0, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x00},
				{ 0x78, 0xcc, 0x0c, 0x38, 0x60, 0xcc, 0xfc, 0x00},
				{ 0x78, 0xcc, 0x0c, 0x38, 0x0c, 0xcc, 0x78, 0x00},
				{ 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x00},
				{ 0xfc, 0xc0, 0xf8, 0x0c, 0x0c, 0xcc, 0x78, 0x00},
				{ 0x38, 0x60, 0xc0, 0xf8, 0xcc, 0xcc, 0x78, 0x00},
				{ 0xfc, 0xcc, 0x0c, 0x18, 0x30, 0x60, 0x60, 0x00},
				{ 0x78, 0xcc, 0xcc, 0x78, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x78, 0xcc, 0xcc, 0x7c, 0x0c, 0x18, 0x70, 0x00},
				{ 0x00, 0x00, 0x30, 0x30, 0x00, 0x30, 0x30, 0x00},
				{ 0x00, 0x00, 0x30, 0x30, 0x00, 0x70, 0x30, 0x60},
				{ 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00},
				{ 0x00, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00, 0x00},
				{ 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00},
				{ 0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00},
				{ 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00},
				{ 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0x00},
				{ 0xfc, 0x66, 0x66, 0x7c, 0x66, 0x66, 0xfc, 0x00},
				{ 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00},
				{ 0xfc, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xfc, 0x00},
				{ 0xfe, 0x62, 0x68, 0x78, 0x68, 0x62, 0xfe, 0x00},
				{ 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00},
				{ 0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3e, 0x00},
				{ 0xcc, 0xcc, 0xcc, 0xfc, 0xcc, 0xcc, 0xcc, 0x00},
				{ 0x78, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00},
				{ 0xe6, 0x66, 0x6c, 0x78, 0x6c, 0x66, 0xe6, 0x00},
				{ 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00},
				{ 0xc6, 0xee, 0xfe, 0xd6, 0xc6, 0xc6, 0xc6, 0x00},
				{ 0xc6, 0xe6, 0xf6, 0xde, 0xce, 0xc6, 0xc6, 0x00},
				{ 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00},
				{ 0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00},
				{ 0x78, 0xcc, 0xcc, 0xcc, 0xdc, 0x78, 0x1c, 0x00},
				{ 0xfc, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0xe6, 0x00},
				{ 0x78, 0xcc, 0xe0, 0x38, 0x1c, 0xcc, 0x78, 0x00},
				{ 0xfc, 0xb4, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xfc, 0x00},
				{ 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00},
				{ 0xc6, 0xc6, 0xc6, 0xd6, 0xfe, 0xee, 0xc6, 0x00},
				{ 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00},
				{ 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x30, 0x78, 0x00},
				{ 0xfe, 0xcc, 0x98, 0x30, 0x62, 0xc6, 0xfe, 0x00},
				{ 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00},
				{ 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00},
				{ 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00},
				{ 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff},
				{ 0x30, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00},
				{ 0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xbc, 0x00},
				{ 0x00, 0x00, 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x00},
				{ 0x1c, 0x0c, 0x0c, 0x7c, 0xcc, 0xcc, 0x76, 0x00},
				{ 0x00, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00},
				{ 0x38, 0x6c, 0x60, 0xf0, 0x60, 0x60, 0xf0, 0x00},
				{ 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8},
				{ 0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00},
				{ 0x30, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0x18, 0x00, 0x78, 0x18, 0x18, 0x18, 0xd8, 0x70},
				{ 0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00},
				{ 0x70, 0x30, 0x30, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xc6, 0xc6, 0x00},
				{ 0x00, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0xcc, 0x00},
				{ 0x00, 0x00, 0x78, 0xcc, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0},
				{ 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e},
				{ 0x00, 0x00, 0xd8, 0x6c, 0x6c, 0x60, 0xf0, 0x00},
				{ 0x00, 0x00, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x00},
				{ 0x10, 0x30, 0x7c, 0x30, 0x30, 0x34, 0x18, 0x00},
				{ 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x76, 0x00},
				{ 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x78, 0x30, 0x00},
				{ 0x00, 0x00, 0xc6, 0xc6, 0xd6, 0xfe, 0x6c, 0x00},
				{ 0x00, 0x00, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0x00},
				{ 0x00, 0x00, 0xcc, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8},
				{ 0x00, 0x00, 0xfc, 0x98, 0x30, 0x64, 0xfc, 0x00},
				{ 0x1c, 0x30, 0x30, 0xe0, 0x30, 0x30, 0x1c, 0x00},
				{ 0x18, 0x18, 0x18, 0x00, 0x18, 0x18, 0x18, 0x00},
				{ 0xe0, 0x30, 0x30, 0x1c, 0x30, 0x30, 0xe0, 0x00},
				{ 0x76, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
				{ 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xc6, 0xfe, 0x00},
				{ 0x78, 0xcc, 0xc0, 0xcc, 0x78, 0x18, 0x0c, 0x78},
				{ 0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00},
				{ 0x1c, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00},
				{ 0x7e, 0xc3, 0x3c, 0x06, 0x3e, 0x66, 0x3f, 0x00},
				{ 0xcc, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00},
				{ 0xe0, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00},
				{ 0x30, 0x30, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00},
				{ 0x00, 0x00, 0x7c, 0xc0, 0xc0, 0x7c, 0x06, 0x3c},
				{ 0x7e, 0xc3, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00},
				{ 0xcc, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00},
				{ 0xe0, 0x00, 0x78, 0xcc, 0xfc, 0xc0, 0x78, 0x00},
				{ 0xcc, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0x7c, 0xc6, 0x38, 0x18, 0x18, 0x18, 0x3c, 0x00},
				{ 0xe0, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0xcc, 0x30, 0x78, 0xcc, 0xcc, 0xfc, 0xcc, 0x00},
				{ 0x30, 0x30, 0x00, 0x78, 0xcc, 0xfc, 0xcc, 0x00},
				{ 0x1c, 0x00, 0xfc, 0x60, 0x78, 0x60, 0xfc, 0x00},
				{ 0x00, 0x00, 0x7f, 0x0c, 0x7f, 0xcc, 0x7f, 0x00},
				{ 0x3e, 0x6c, 0xcc, 0xfe, 0xcc, 0xcc, 0xce, 0x00},
				{ 0x78, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0xcc, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0xe0, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x78, 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00},
				{ 0x00, 0xe0, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00},
				{ 0x00, 0xcc, 0x00, 0xcc, 0xcc, 0xfc, 0x0c, 0xf8},
				{ 0xc6, 0x38, 0x7c, 0xc6, 0xc6, 0x7c, 0x38, 0x00},
				{ 0xcc, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x18, 0x18, 0x7e, 0xc0, 0xc0, 0x7e, 0x18, 0x18},
				{ 0x38, 0x6c, 0x64, 0xf0, 0x60, 0xe6, 0xfc, 0x00},
				{ 0xcc, 0xcc, 0x78, 0xfc, 0x30, 0xfc, 0x30, 0x00},
				{ 0xf0, 0xd8, 0xd8, 0xf4, 0xcc, 0xde, 0xcc, 0x0e},
				{ 0x0e, 0x1b, 0x18, 0x7e, 0x18, 0x18, 0xd8, 0x70},
				{ 0x1c, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x7e, 0x00},
				{ 0x38, 0x00, 0x70, 0x30, 0x30, 0x30, 0x78, 0x00},
				{ 0x00, 0x1c, 0x00, 0x78, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0x1c, 0x00, 0xcc, 0xcc, 0xcc, 0x7e, 0x00},
				{ 0x00, 0xf8, 0x00, 0xf8, 0xcc, 0xcc, 0xcc, 0x00},
				{ 0xfc, 0x00, 0xcc, 0xec, 0xfc, 0xdc, 0xcc, 0x00},
				{ 0x3c, 0x6c, 0x6c, 0x3e, 0x00, 0x7e, 0x00, 0x00},
				{ 0x3c, 0x66, 0x66, 0x3c, 0x00, 0x7e, 0x00, 0x00},
				{ 0x30, 0x00, 0x30, 0x60, 0xc0, 0xcc, 0x78, 0x00},
				{ 0x00, 0x00, 0x00, 0xfc, 0xc0, 0xc0, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0xfc, 0x0c, 0x0c, 0x00, 0x00},
				{ 0xc6, 0xcc, 0xd8, 0x3e, 0x63, 0xce, 0x98, 0x1f},
				{ 0xc6, 0xcc, 0xd8, 0xf3, 0x67, 0xcf, 0x9f, 0x03},
				{ 0x00, 0x18, 0x00, 0x18, 0x18, 0x3c, 0x3c, 0x18},
				{ 0x00, 0x33, 0x66, 0xcc, 0x66, 0x33, 0x00, 0x00},
				{ 0x00, 0xcc, 0x66, 0x33, 0x66, 0xcc, 0x00, 0x00},
				{ 0x22, 0x88, 0x22, 0x88, 0x22, 0x88, 0x22, 0x88},
				{ 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa, 0x55, 0xaa},
				{ 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77, 0xdd, 0x77},
				{ 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x18, 0x18, 0xf8, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18},
				{ 0x36, 0x36, 0x36, 0x36, 0xf6, 0x36, 0x36, 0x36},
				{ 0x00, 0x00, 0x00, 0x00, 0xfe, 0x36, 0x36, 0x36},
				{ 0x00, 0x00, 0xf8, 0x18, 0xf8, 0x18, 0x18, 0x18},
				{ 0x36, 0x36, 0xf6, 0x06, 0xf6, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36, 0x36},
				{ 0x00, 0x00, 0xfe, 0x06, 0xf6, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0xf6, 0x06, 0xfe, 0x00, 0x00, 0x00},
				{ 0x36, 0x36, 0x36, 0x36, 0xfe, 0x00, 0x00, 0x00},
				{ 0x18, 0x18, 0xf8, 0x18, 0xf8, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0xf8, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x18, 0x18, 0x1f, 0x00, 0x00, 0x00},
				{ 0x18, 0x18, 0x18, 0x18, 0xff, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x18, 0x18, 0x1f, 0x18, 0x18, 0x18},
				{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00},
				{ 0x18, 0x18, 0x18, 0x18, 0xff, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18},
				{ 0x36, 0x36, 0x36, 0x36, 0x37, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0x37, 0x30, 0x3f, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x3f, 0x30, 0x37, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0xf7, 0x00, 0xff, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0xff, 0x00, 0xf7, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0x37, 0x30, 0x37, 0x36, 0x36, 0x36},
				{ 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00},
				{ 0x36, 0x36, 0xf7, 0x00, 0xf7, 0x36, 0x36, 0x36},
				{ 0x18, 0x18, 0xff, 0x00, 0xff, 0x00, 0x00, 0x00},
				{ 0x36, 0x36, 0x36, 0x36, 0xff, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18},
				{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0x36, 0x36, 0x3f, 0x00, 0x00, 0x00},
				{ 0x18, 0x18, 0x1f, 0x18, 0x1f, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x1f, 0x18, 0x1f, 0x18, 0x18, 0x18},
				{ 0x00, 0x00, 0x00, 0x00, 0x3f, 0x36, 0x36, 0x36},
				{ 0x36, 0x36, 0x36, 0x36, 0xf7, 0x36, 0x36, 0x36},
				{ 0x18, 0x18, 0xff, 0x00, 0xff, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x18, 0x18, 0xf8, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x1f, 0x18, 0x18, 0x18},
				{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff},
				{ 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff},
				{ 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0},
				{ 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f},
				{ 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x76, 0xdc, 0xc8, 0xdc, 0x76, 0x00},
				{ 0x00, 0x78, 0xcc, 0xf8, 0xcc, 0xf8, 0xc0, 0xc0},
				{ 0x00, 0xfe, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0, 0x00},
				{ 0x00, 0xfe, 0x6c, 0x6c, 0x6c, 0x6c, 0x6c, 0x00},
				{ 0xfe, 0x66, 0x30, 0x18, 0x30, 0x66, 0xfe, 0x00},
				{ 0x00, 0x00, 0x7e, 0xcc, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0x66, 0x66, 0x66, 0x66, 0x7c, 0x60, 0xc0},
				{ 0x00, 0x76, 0xdc, 0x18, 0x18, 0x18, 0x18, 0x00},
				{ 0xfc, 0x30, 0x78, 0xcc, 0xcc, 0x78, 0x30, 0xfc},
				{ 0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0x6c, 0x38, 0x00},
				{ 0x38, 0x6c, 0xc6, 0xc6, 0x6c, 0x6c, 0xee, 0x00},
				{ 0x1c, 0x30, 0x18, 0x7c, 0xcc, 0xcc, 0x78, 0x00},
				{ 0x00, 0x00, 0x7e, 0xdb, 0xdb, 0x7e, 0x00, 0x00},
				{ 0x06, 0x0c, 0x7e, 0xdb, 0xdb, 0x7e, 0x60, 0xc0},
				{ 0x3c, 0x60, 0xc0, 0xfc, 0xc0, 0x60, 0x3c, 0x00},
				{ 0x78, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00},
				{ 0x00, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x00},
				{ 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0xfc, 0x00},
				{ 0x60, 0x30, 0x18, 0x30, 0x60, 0x00, 0xfc, 0x00},
				{ 0x18, 0x30, 0x60, 0x30, 0x18, 0x00, 0xfc, 0x00},
				{ 0x0e, 0x1b, 0x1b, 0x18, 0x18, 0x18, 0x18, 0x18},
				{ 0x18, 0x18, 0x18, 0x18, 0x18, 0xd8, 0xd8, 0x70},
				{ 0x30, 0x30, 0x00, 0xfc, 0x00, 0x30, 0x30, 0x00},
				{ 0x00, 0x72, 0x9c, 0x00, 0x72, 0x9c, 0x00, 0x00},
				{ 0x38, 0x6c, 0x6c, 0x38, 0x00, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00},
				{ 0x0f, 0x0c, 0x0c, 0x0c, 0xec, 0x6c, 0x3c, 0x1c},
				{ 0x78, 0x6c, 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00},
				{ 0x78, 0x0c, 0x38, 0x60, 0x7c, 0x00, 0x00, 0x00},
				{ 0x00, 0x00, 0x3c, 0x3c, 0x3c, 0x3c, 0x00, 0x00},
				{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff }
			};

			return font::create_from_data_array((const uint8_t*)default_font_data, 256, 0);
		}

		font_t* create_from_data_array(const uint8_t* data, int32_t count, int32_t start)
		{
			font_t* font = nullptr;

			if (data)
			{
				font = new font_t;

				if (font)
				{
					font->m_start = start;
					font->m_count = count;
					font->m_glyphs = new bitmap_t * [count];

					if (font->m_glyphs)
					{
						for (int32_t i = 0; i < count; ++i)
						{
							font->m_glyphs[i] = nullptr;
						}

						for (int32_t i = 0; i < count; ++i)
						{
							font->m_glyphs[i] = al_create_bitmap(glyph::size, glyph::size);

							if (font->m_glyphs[i])
							{
								glyph::set(reinterpret_cast<glyph_t*>(font->m_glyphs[i]), data + i * glyph::size);
							}
							else
							{
								for (int32_t j = 0; j < count; ++j)
								{
									al_destroy_bitmap(font->m_glyphs[j]);
								}
								delete[] font->m_glyphs;
								delete font;
								font = nullptr;
								i = count;
							}
						}
					}
					else
					{
						delete font;
						font = nullptr;
					}
				}
			}

			return font;
		}

		void destroy(font_t* font)
		{
			if (font)
			{
				if (font->m_glyphs)
				{
					for (int32_t j = 0; j < font->m_count; ++j)
					{
						al_destroy_bitmap(font->m_glyphs[j]);
					}
					delete[] font->m_glyphs;
				}
				delete font;
			}
		}

		namespace glyph
		{
			glyph_t* get(font_t* font, int32_t index)
			{
				bitmap_t* glyph = nullptr;

				if (font && index >= font->m_start && index < (font->m_count - font->m_start))
				{
					glyph = font->m_glyphs[index - font->m_start];
				}

				return reinterpret_cast<glyph_t*>(glyph);
			}

			bool set(glyph_t* glyph, const uint8_t* data)
			{
				bool rv = false;

				if (glyph && data)
				{
					bitmap_t* bitmap = reinterpret_cast<bitmap_t*>(glyph);
					bitmap_t* target = al_get_target_bitmap();

					al_set_target_bitmap(bitmap);
					al_clear_to_color(color::map_rgb(0));

					al_lock_bitmap(bitmap, ALLEGRO_PIXEL_FORMAT_ANY, ALLEGRO_LOCK_WRITEONLY);

					for (int32_t j = 0; j < glyph::size; ++j)
					{
						uint8_t p = data[j];
						for (int32_t i = 0; i < glyph::size; ++i)
						{
							float c = 0.0f;
							if (p & 0x1)
							{
								c = 1.0f;
							}
							al_put_pixel((glyph::size - 1) - i, j, al_map_rgba_f(c, c, c, c));
							p = p >> 1;
						}
					}

					al_unlock_bitmap(bitmap);
					al_set_target_bitmap(target);
				}

				return rv;
			}

			bool set(glyph_t* glyph, const std::string& string_16)
			{
				uint8_t data[glyph::size] = { 0, 0, 0, 0, 0, 0, 0, 0 };
				for (int32_t i = 0; i < (glyph::size << 1); i = i + 2)
				{
					uint32_t h = hex::from_char(string_16.at(i));
					uint32_t l = hex::from_char(string_16.at(i + 1));
					data[i >> 1] = (uint8_t)(l + (h << 4));
				}

				return set(glyph, data);
			}

			void set(font_t* font, int32_t index, const std::string& string_16)
			{
				glyph_t* glyph = glyph::get(font, index);
				if (glyph)
				{
					set(glyph, string_16);
				}
			}
		}

		void draw(const font_t* font, color_t color, const point_t& point, uint8_t c)
		{
			if (c < 0) return;

			if (font && c >= font->m_start && c < (font->m_count + font->m_start))
			{
				al_draw_tinted_bitmap(font->m_glyphs[c - font->m_start], color, point.x, point.y, 0);
			}
		}

		void draw(const font_t* font, color_t color, const point_t& point, alignment_t alignment, const std::string& text)
		{
			if (font)
			{
				float x = point.x;
				float y = point.y;
				float length = static_cast<float>(text.length());
				float w = (length * static_cast<float>(glyph::size));

				if (alignment == alignment_t::right)
				{
					x -= w;
				}

				if (alignment == alignment_t::centre)
				{
					x -= (w * 0.5f);
				}

				for (int32_t c : text)
				{
					point_t p = { x, y };

					draw(font, color, p, c);
					x += static_cast<float>(glyph::size);
				}
			}
		}

		void draw(const font_t* font, color_t color, const point_t& point, alignment_t alignment, const char* format, ...)
		{
			static const size_t buffer_size = 2048;
			char buffer[buffer_size] = { 0 };
			va_list args;

			va_start(args, format);

			vsprintf_s(buffer, buffer_size, format, args);

			va_end(args);

			draw(font, color, point, alignment, std::string(buffer));
		}

		void get_data(bitmap_t* bitmap, uint8_t data[glyph::size], int32_t x = 0, int32_t y = 0)
		{
			al_lock_bitmap(bitmap, ALLEGRO_PIXEL_FORMAT_ANY, ALLEGRO_LOCK_READONLY);
			int32_t white = 0xffffffff;

			for (int32_t j = 0; j < glyph::size; ++j)
			{
				data[j] = 0;

				for (int32_t i = 0; i < glyph::size; ++i)
				{
					int32_t pixel = color::unmap_rgba(al_get_pixel(bitmap, x + i, y + j));

					data[j] <<= 1;

					if (white == pixel)
					{
						data[j] |= 0x1;
					}
				}
			}

			al_unlock_bitmap(bitmap);
		}


		bool save_to_file(font_t* font, const std::string& filename)
		{
			bool rv = false;
			std::string out;

			if (font)
			{
				std::ofstream f(filename, std::ios::out);

				if (f.is_open())
				{
					f << "{\n\t\"font\" :\n\t{\n";
					f << "\t\t\"start\": " << font->m_start << ",\n";
					f << "\t\t\"count\": " << font->m_count << ",\n";
					f << "\t\t\"data\":\n\t\t[\n";
					for (int32_t index = 0; index < font->m_count; ++index)
					{
						uint8_t data[glyph::size] =
						{
							0, 0, 0, 0, 0, 0, 0, 0
						};

						out.clear();

						get_data(font->m_glyphs[index], data);

						for (int32_t j = 0; j < glyph::size; ++j)
						{
							out.append("0x");

							out.push_back(hex::to_char((data[j] & 0xf0) >> 4));
							out.push_back(hex::to_char(data[j] & 0xf));
							
							if (j < (glyph::size - 1))
							{
								out.append(", ");
							}
						}
						f << "\t\t\t{ " << out << " }";

						if (index < (font->m_count - 1))
						{
							f << ',';
						}

						out.clear();
						out.append(" // 0x");
						out.push_back(hex::to_char((index & 0xf0) >> 4));
						out.push_back(hex::to_char(index & 0xf));
						f << out;

						if ((index & 0xf) == 0xf)
						{
							f << '\n';
						}


						f << '\n';
					}

					f << "\t\t]\n\t}\n}\n\n";
					f.close();
				}
			}

			return rv;
		}


#ifdef INCLUDE_JSON_FONT_FUNCTIONS
		font_t* load_from_json_file(const std::string& filename)
		{
			bool error = false;
			nlohmann::json font_json;

			std::ifstream f(filename);
			if (!f.is_open())
			{
				return nullptr;
			}

			font_json = nlohmann::json::parse(f);

			if (font_json.is_null())
			{
				return nullptr;
			}

			f.close();

			if (!font_json.contains("font"))
			{
				return nullptr;
			}
			nlohmann::json font_data = font_json["font"];

			if (!font_data.contains("start") ||
				!font_data.contains("count") ||
				!font_data.contains("data"))
			{
				return nullptr;
			}

			int32_t start = font_data["start"];
			int32_t count = font_data["count"];

			nlohmann::json darray = font_data["data"];
			if (!darray.is_array())
			{
				return nullptr;
			}

			if (darray.size() != count)
			{
				return nullptr;
			}

			uint8_t* data = new uint8_t[count * glyph::size];
			if (!data)
			{
				return nullptr;
			}

			int32_t index = 0;
			for (nlohmann::json::iterator it = darray.begin(); it != darray.end(); ++it)
			{
				std::string str = *it;

				if (str.length() != 16)
				{
					delete[] data;
					f.close();
					return nullptr;
				}

				for (int32_t j = 0; j < glyph::size; ++j)
				{
					size_t i = static_cast<size_t>(j << 1);

					uint8_t h = hex::from_char(str.at(i));
					uint8_t l = hex::from_char(str.at(i + 1));

					data[index + j] = l + (h << 4);
				}

				index += glyph::size;
			}

			f.close();

			font_t* font = font::create_from_data_array(data, count, start);

			delete[] data;

			return font;
		}

		font_t* load_from_bitmap_file(const std::string& filename, int32_t start)
		{
			font_t* font = nullptr;

			bitmap_t* bitmap = al_load_bitmap(filename.c_str());
			if (!bitmap)
			{
				return nullptr;
			}

			int32_t width = al_get_bitmap_width(bitmap) / glyph::size;
			int32_t height = al_get_bitmap_height(bitmap) / glyph::size;

			uint8_t* data = new uint8_t[width * height * glyph::size];
			if (!data)
			{
				al_destroy_bitmap(bitmap);
				return nullptr;
			}

			for (int32_t j = 0; j < height; ++j)
			{
				for (int32_t i = 0; i < width; ++i)
				{
					int32_t index = i + (j * width);
					get_data(bitmap, data + index * glyph::size, i * glyph::size, j * glyph::size);
				}
			}

			font = font::create_from_data_array(data, width * height, start);

			delete[] data;
			al_destroy_bitmap(bitmap);

			return font;
		}


		bool save_to_json_file(font_t* font, const std::string& filename)
		{
			bool rv = false;
			std::string out;

			if (font)
			{
				std::ofstream f(filename, std::ios::out);

				if (f.is_open())
				{
					f << "{\n\t\"font\" :\n\t{\n";
					f << "\t\t\"start\": " << font->m_start << ",\n";
					f << "\t\t\"count\": " << font->m_count << ",\n";
					f << "\t\t\"data\":\n\t\t[\n";
					for (int32_t index = 0; index < font->m_count; ++index)
					{
						uint8_t data[glyph::size] =
						{
							0, 0, 0, 0, 0, 0, 0, 0
						};

						out.clear();

						get_data(font->m_glyphs[index], data);

						for (int32_t j = 0; j < glyph::size; ++j)
						{
							out.push_back(hex::to_char((data[j] & 0xf0) >> 4));
							out.push_back(hex::to_char(data[j] & 0xf));
						}
						f << "\t\t\t\"" << out << "\"";
						if (index < (font->m_count - 1))
						{
							f << ',';
						}
						f << '\n';
					}

					f << "\t\t]\n\t}\n}\n\n";
					f.close();
				}
			}

			return rv;
		}
#endif // INCLUDE_JSON_FONT_FUNCTIONS
	}
}
