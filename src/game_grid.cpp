#include "game_grid.h"
#include "game_color_list.h"

namespace pacman
{
	namespace game
	{
		typedef struct grid_t
		{
			uint8_t m_data[grid::width * grid::height]{};
		} grid_t;

		namespace grid
		{
			grid_t* create()
			{
				grid_t* grid = new grid_t;
				if (grid)
				{
					grid::reset(grid);
				}
				return grid;
			}

			void destroy(grid_t* grid)
			{
				if (grid)
				{
					delete grid;
				}
			}

			void reset(grid_t* grid)
			{
				const uint8_t data[grid::width * grid::height] =
				{
					0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x49, 0x47, 0x48, 0x20, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x84,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
					0x85, 0xa2, 0x86, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x87, 0xa2, 0x88,
					0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
					0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x91, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x86, 0x93, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x94, 0x87, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x95,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x86, 0x87, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x96, 0x92, 0x97, 0xa1, 0xa1, 0x98, 0x92, 0x99, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x81, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x81,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x92, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x89, 0x8b, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x89, 0x8b, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x92,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x9a, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x9b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x80, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x84,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
					0x85, 0xa0, 0x8c, 0x8d, 0x8f, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x90, 0x8d, 0x8e, 0xa0, 0x88,
					0x85, 0xa2, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x20, 0x20, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa2, 0x88,
					0x9c, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x9d,
					0x9e, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x9f,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
					0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
					0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
					0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x95,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
					0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
				};

				for (int8_t j = 0; j < grid::height; ++j)
				{
					for (int8_t i = 0; i < grid::width; ++i)
					{
						grid->m_data[i + j * grid::width] = data[i + j * grid::width];
					}
				}
			}

			namespace cell
			{
				namespace type
				{
					int32_t get(uint8_t value)
					{
						int32_t type = cell::type::empty;

						if (value >= 0x20 && value < 0x80)
						{
							type = cell::type::text;
						}

						if (value >= 0x80 && value <= 0x9f)
						{
							type = cell::type::wall;
						}
						if (value == 0xa1)
						{
							type = cell::type::door;
						}
						if (value == 0xa2) // big dot
						{
							type = cell::type::big_dot;
						}
						if (value == 0xa0) // dot
						{
							type = cell::type::dot;
						}

						return type;
					}
				}
				void set(grid_t* grid, int32_t x, int32_t y, uint8_t value)
				{
					grid->m_data[x + y * width] = value;
				}

				uint8_t get(const grid_t* grid, int32_t x, int32_t y)
				{
					return grid->m_data[x + y * width];
				}
			}

			namespace gfx
			{
				void draw(console_t* console, const grid_t* grid, bool blink)
				{
					pacman::console::palette::background::set(console, 0);
					pacman::console::palette::foreground::set(console, 15);
					pacman::console::clear(console);
					for (int8_t j = 0; j < grid::height; ++j)
					{
						for (int8_t i = 0; i < grid::width; ++i)
						{
							int32_t color = 0;
							uint8_t value = grid->m_data[i + j * grid::width];
							int32_t type = cell::type::get(value);

							switch (type)
							{
							case cell::type::empty:		color = color_list::black; break;
							case cell::type::text:		color = color_list::white; break;
							case cell::type::wall:		color = color_list::blue; break;
							case cell::type::dot:		color = color_list::dot; break;
							case cell::type::big_dot:	
							{
								color = (blink ? color_list::dot : color_list::black);
							} break;
							case cell::type::door:		color = color_list::pink; break;
							}

							pacman::console::palette::background::set(console, 0);
							pacman::console::palette::foreground::set(console, color);
							pacman::console::text::gfx::draw(console, value);
						}
					}
				}
			}
		}
	}
}