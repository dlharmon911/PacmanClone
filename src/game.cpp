#include "pacman.h"

namespace pacman
{
	namespace game
	{

	}


	typedef struct game_t
	{
		int8_t grid[game::grid::width * game::grid::height];
	} game_t;

	namespace game
	{		
		pacman::sprite::layer_t m_sprite_layers[] =
		{
			{ game::color::pacman,	{0x61, 0x62, 0x63, 0x64}}, // 0x00
			{ game::color::pacman,	{0x65, 0x66, 0x67, 0x68}}, // 0x01
			{ game::color::pacman,	{0x69, 0x6a, 0x6b, 0x6c}}, // 0x02
			{ game::color::pacman,	{0x6e, 0x6e, 0x6f, 0x70}}, // 0x03
			{ game::color::pacman,	{0x71, 0x72, 0x73, 0x74}}, // 0x04
			{ game::color::blinky,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x05
			{ game::color::blinky,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x06
			{ game::color::pinky,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x07
			{ game::color::pinky,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x08
			{ game::color::inky,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x09
			{ game::color::inky,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x0a
			{ game::color::clyde,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x0b
			{ game::color::clyde,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x0c
			
			{ game::color::wall,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x0d
			{ game::color::dot,		{0xbd, 0xbe, 0xbf, 0xc0}}, // 0x0e
			
			{ game::color::wall,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x0f
			{ game::color::dot,		{0xbd, 0xbe, 0xbf, 0xc0}}, // 0x10

			{ game::color::eyes,	{0x61, 0x62, 0xa3, 0xa4}}, // 0x11
			{ game::color::blinky,	{0xbd, 0xbe, 0xbf, 0xc0}}, // 0x12
			
			{ game::color::eyes,	{0x61, 0x62, 0xa5, 0xa6}}, // 0x13
			{ game::color::blinky,	{0xbd, 0xbe, 0xbf, 0xc0}}, // 0x14

			{ game::color::eyes,	{0xa7, 0xa8, 0xa9, 0xaa}}, // 0x15
			{ game::color::wall,	{0xb5, 0xb6, 0x00, 0x00}}, // 0x16

			{ game::color::eyes,	{0xab, 0xac, 0xad, 0xae}}, // 0x17
			{ game::color::wall,	{0xb7, 0xb8, 0x00, 0x00}}, // 0x18

			{ game::color::eyes,	{0xaf, 0xb0, 0x00, 0x00}}, // 0x19
			{ game::color::wall,	{0xb9, 0xba, 0x00, 0x00}}, // 0x20

			{ game::color::eyes,	{0xb1, 0xb2, 0xb3, 0xb4}}, // 0x21
			{ game::color::wall,	{0x00, 0x00, 0xbb, 0xbc}}, // 0x22
		};

		sprite_t m_sprites[] =
		{
			{ m_sprite_layers, 0x00, 0x00}, // p_f_0
			{ m_sprite_layers, 0x01, 0x01}, // p_f_1
			{ m_sprite_layers, 0x02, 0x02}, // p_f_3
			{ m_sprite_layers, 0x03, 0x03}, // p_f_4
			{ m_sprite_layers, 0x04, 0x04}, // p_f_5
			{ m_sprite_layers, 0x05, 0x05}, // g_b_f_0
			{ m_sprite_layers, 0x06, 0x06}, // g_b_f_1
			{ m_sprite_layers, 0x07, 0x07}, // g_p_f_0
			{ m_sprite_layers, 0x08, 0x08}, // g_p_f_1
			{ m_sprite_layers, 0x09, 0x09}, // g_i_f_0
			{ m_sprite_layers, 0x0a, 0x0a}, // g_i_f_1
			{ m_sprite_layers, 0x0b, 0x0b}, // g_c_f_0
			{ m_sprite_layers, 0x0c, 0x0c}, // g_c_f_1
			{ m_sprite_layers, 0x0d, 0x0e}, // g_a_f_0
			{ m_sprite_layers, 0x0f, 0x10}, // g_a_f_1
			{ m_sprite_layers, 0x11, 0x12}, // g_a_f_2
			{ m_sprite_layers, 0x13, 0x14}, // g_a_f_3
			{ m_sprite_layers, 0x15, 0x16}, // g_e_f_0
			{ m_sprite_layers, 0x17, 0x18}, // g_e_f_1
			{ m_sprite_layers, 0x19, 0x1a}, // g_e_f_2
			{ m_sprite_layers, 0x1b, 0x1c}, // g_e_f_3
		};

		game_t* create()
		{
			game_t* game = new game_t;
			if (game)
			{
				game::reset(game);
			}
			return game;
		}

		void destroy(game_t* game)
		{
			if (game)
			{
				delete game;
			}
		}
		namespace console
		{
			void draw_grid(console_t* console, const game_t* game)
			{
				pacman::console::palette::background::set(console, 0);
				pacman::console::palette::foreground::set(console, 15);
				pacman::console::clear(console);
				for (int8_t j = 0; j < grid::height; ++j)
				{
					for (int8_t i = 0; i < grid::width; ++i)
					{
						int8_t color = 0;
						uint8_t ch = game->grid[i + j * grid::width];

						if (ch >= 32 && ch < 0x80)
						{
							color = color::text;
						}

						if (ch >= 0x80 && ch <= 0x9f)
						{
							color = color::wall;
						}
						if (ch == 0xa1)
						{
							color = color::pinky;
						}
						if (ch == 0xa2) // big dot
						{
							color = color::dot;
						}
						if (ch == 0xa0) // dot
						{
							color = color::dot;
						}

						pacman::console::palette::background::set(console, 0);
						pacman::console::palette::foreground::set(console, color);
						pacman::console::text::out(console, ch);
					}
				}
			}

			void draw_sprites(console_t* console, const game_t* game)
			{
				pacman::sprite::draw(console, &m_sprites[sprite::ghost_afraid_frame_00], { 104.0f, 204.0f }, pacman::sprite::draw_flags::none);
				//pacman::sprite::draw(console, &m_sprites[sprite::ghost_eyes_frame_03], { 104.0f, 204.0f }, pacman::sprite::draw_flags::none);
			}
		}

		void reset(game_t* game)
		{
			const uint8_t grid[grid::width * grid::height] = 
			{ 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x49, 0x47, 0x48, 0x20, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x84,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa2, 0x86, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x87, 0xa2, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x91, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x86, 0x93, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x94, 0x87, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x95,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x86, 0x87, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x96, 0x92, 0x97, 0xa1, 0xa1, 0x98, 0x92, 0x99, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x81, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x81,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x92, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x89, 0x8b, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x89, 0x8b, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x92,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x9a, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x9b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x80, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x84,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8f, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x90, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa2, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x20, 0x20, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa2, 0x88,
				0x9c, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x9d,
				0x9e, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x9f,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x95,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 
			};

			for (int8_t j = 0; j < grid::height; ++j)
			{
				for (int8_t i = 0; i < grid::width; ++i)
				{
					game->grid[i + j * grid::width] = grid[i + j * grid::width];
				}
			}
		}

		namespace font
		{
			font_t* create()
			{
				static const uint8_t default_font_data[256][pacman::font::glyph::size] =
				{

#define				d_zero_char { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }

					d_zero_char, // 0x00
					d_zero_char, // 0x01
					d_zero_char, // 0x02
					d_zero_char, // 0x03
					d_zero_char, // 0x04
					d_zero_char, // 0x05
					d_zero_char, // 0x06
					d_zero_char, // 0x07
					d_zero_char, // 0x08
					d_zero_char, // 0x09
					d_zero_char, // 0x0a
					d_zero_char, // 0x0b
					d_zero_char, // 0x0c
					d_zero_char, // 0x0d
					d_zero_char, // 0x0e
					d_zero_char, // 0x0f

					d_zero_char, // 0x10
					d_zero_char, // 0x11
					d_zero_char, // 0x12
					d_zero_char, // 0x13
					d_zero_char, // 0x14
					d_zero_char, // 0x15
					d_zero_char, // 0x16
					d_zero_char, // 0x17
					d_zero_char, // 0x18
					d_zero_char, // 0x19
					d_zero_char, // 0x1a
					d_zero_char, // 0x1b
					d_zero_char, // 0x1c
					d_zero_char, // 0x1d
					d_zero_char, // 0x1e
					d_zero_char, // 0x1f

					d_zero_char, // 0x20
					{ 0x18, 0x3c, 0x3c, 0x3c, 0x18, 0x18, 0x00, 0x18 }, // 0x21
					{ 0x6c, 0x6c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x22
					{ 0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00 }, // 0x23
					{ 0x30, 0x7c, 0xc0, 0x78, 0x0c, 0xf8, 0x30, 0x00 }, // 0x24
					{ 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00 }, // 0x25
					{ 0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00 }, // 0x26
					{ 0x60, 0x60, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x27
					{ 0x18, 0x30, 0x60, 0x60, 0x60, 0x30, 0x18, 0x00 }, // 0x28
					{ 0x60, 0x30, 0x18, 0x18, 0x18, 0x30, 0x60, 0x00 }, // 0x29
					{ 0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00 }, // 0x2a
					{ 0x00, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x00, 0x00 }, // 0x2b
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x60 }, // 0x2c
					{ 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00 }, // 0x2d
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x30, 0x00 }, // 0x2e
					{ 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00 }, // 0x2f

					{ 0x38, 0x4c, 0xc6, 0xc6, 0xc6, 0x64, 0x38, 0x00 }, // 0x30
					{ 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00 }, // 0x31
					{ 0x7c, 0xc6, 0x0e, 0x3c, 0x78, 0xe0, 0xfe, 0x00 }, // 0x32
					{ 0x7e, 0x0c, 0x18, 0x3c, 0x06, 0xc6, 0x7c, 0x00 }, // 0x33
					{ 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x0c, 0x00 }, // 0x34
					{ 0xfc, 0xc0, 0xfc, 0x06, 0x06, 0xc6, 0x7c, 0x00 }, // 0x35
					{ 0x3c, 0x60, 0xc0, 0xfc, 0xc6, 0xc6, 0x7c, 0x00 }, // 0x36
					{ 0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00 }, // 0x37
					{ 0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00 }, // 0x38
					{ 0x7c, 0xc6, 0xc6, 0x7e, 0x06, 0x0c, 0x78, 0x00 }, // 0x39
					{ 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x00 }, // 0x3a
					{ 0x00, 0x30, 0x30, 0x00, 0x00, 0x30, 0x30, 0x60 }, // 0x3b
					{ 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x00 }, // 0x3c
					{ 0x00, 0x00, 0xfc, 0x00, 0x00, 0xfc, 0x00, 0x00 }, // 0x3d
					{ 0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00 }, // 0x3e
					{ 0x78, 0xcc, 0x0c, 0x18, 0x30, 0x00, 0x30, 0x00 }, // 0x3f

					{ 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00 }, // 0x40
					{ 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0x00 }, // 0x41
					{ 0xfc, 0xc6, 0xc6, 0xfc, 0xc6, 0xc6, 0xfc, 0x00 }, // 0x42
					{ 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00 }, // 0x43
					{ 0xf8, 0xcc, 0xc6, 0xc6, 0xc6, 0xcc, 0xf8, 0x00 }, // 0x44
					{ 0xfe, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xfe, 0x00 }, // 0x45
					{ 0xfe, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0x00 }, // 0x46
					{ 0x3e, 0x60, 0xc0, 0xce, 0xc6, 0x66, 0x3e, 0x00 }, // 0x47
					{ 0xc6, 0xc6, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00 }, // 0x48
					{ 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00 }, // 0x49
					{ 0x1e, 0x06, 0x06, 0x06, 0xc6, 0xc6, 0x7c, 0x00 }, // 0x4a
					{ 0xc6, 0xcc, 0xd8, 0xf0, 0xf8, 0xdc, 0xce, 0x00 }, // 0x4b
					{ 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00 }, // 0x4c
					{ 0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00 }, // 0x4d
					{ 0xc6, 0xe6, 0xf6, 0xfe, 0xde, 0xce, 0xc6, 0x00 }, // 0x4e
					{ 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, // 0x4f

					{ 0xfc, 0xc6, 0xc6, 0xc6, 0xfc, 0xc0, 0xc0, 0x00 }, // 0x50
					{ 0x7c, 0xc6, 0xc6, 0xc6, 0xde, 0xcc, 0x7a, 0x00 }, // 0x51
					{ 0xfc, 0xc6, 0xc6, 0xce, 0xf8, 0xdc, 0xce, 0x00 }, // 0x52
					{ 0x78, 0xcc, 0xc0, 0x7c, 0x06, 0xc6, 0x7c, 0x00 }, // 0x53
					{ 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 }, // 0x54
					{ 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00 }, // 0x55
					{ 0xc6, 0xc6, 0xc6, 0xee, 0x7c, 0x38, 0x10, 0x00 }, // 0x56
					{ 0xc6, 0xc6, 0xd6, 0xfe, 0xfe, 0xee, 0xc6, 0x00 }, // 0x57
					{ 0xc6, 0xee, 0x7c, 0x38, 0x7c, 0xee, 0xc6, 0x00 }, // 0x58
					{ 0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00 }, // 0x59
					{ 0xfe, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xfe, 0x00 }, // 0x5a
					{ 0x78, 0x60, 0x60, 0x60, 0x60, 0x60, 0x78, 0x00 }, // 0x5b
					{ 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00 }, // 0x5c
					{ 0x78, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x00 }, // 0x5d
					{ 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00 }, // 0x5e
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff }, // 0x5f

					{ 0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c }, // 0x60
					{ 0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f }, // 0x61
					{ 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xfe }, // 0x62
					{ 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x03, 0x00 }, // 0x63
					{ 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xc0, 0x00 }, // 0x64
					{ 0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7e }, // 0x65
					{ 0x00, 0xe0, 0xf8, 0xfc, 0xfc, 0xe0, 0x80, 0x00 }, // 0x66
					{ 0x7e, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x03, 0x00 }, // 0x67
					{ 0x00, 0x80, 0xe0, 0xfc, 0xfc, 0xf8, 0xe0, 0x00 }, // 0x68
					{ 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x7e, 0x7c, 0x78 }, // 0x69
					{ 0x00, 0xc0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0x00 }, // 0x6a
					{ 0x78, 0x7c, 0x7e, 0x3f, 0x3f, 0x1f, 0x07, 0x00 }, // 0x6b
					{ 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0x00 }, // 0x6c
					{ 0x00, 0x03, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7e }, // 0x6d
					{ 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0x7e }, // 0x6e
					{ 0x7e, 0x7c, 0x7c, 0x38, 0x38, 0x18, 0x00, 0x00 }, // 0x6f

					{ 0x7e, 0x3e, 0x3e, 0x1c, 0x1c, 0x18, 0x00, 0x00 }, // 0x70
					{ 0x00, 0x07, 0x1f, 0x3f, 0x3f, 0x7e, 0x7c, 0x78 }, // 0x71
					{ 0x00, 0xe0, 0xf8, 0xfc, 0xfc, 0x7e, 0x3e, 0x1e }, // 0x72
					{ 0x70, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x73
					{ 0x0e, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0x74
					d_zero_char, // 0x75
					d_zero_char, // 0x76
					d_zero_char, // 0x77
					d_zero_char, // 0x78
					d_zero_char, // 0x79
					d_zero_char, // 0x7a
					d_zero_char, // 0x7b
					d_zero_char, // 0x7c
					d_zero_char, // 0x7d
					d_zero_char, // 0x7e
					d_zero_char, // 0x7f

					{ 0x0f, 0x30, 0x40, 0x47, 0x88, 0x90, 0x90, 0x90 }, // 0x80
					{ 0xff, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00 }, // 0x81
					{ 0xff, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x08, 0x08 }, // 0x82
					{ 0xff, 0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10 }, // 0x83
					{ 0xf0, 0x0c, 0x02, 0xe2, 0x11, 0x09, 0x09, 0x09 }, // 0x84
					{ 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90 }, // 0x85
					{ 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08 }, // 0x86
					{ 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10 }, // 0x87
					{ 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09, 0x09 }, // 0x88
					{ 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x08 }, // 0x89
					{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00 }, // 0x8a
					{ 0x00, 0x00, 0x00, 0x00, 0xc0, 0x20, 0x10, 0x10 }, // 0x8b
					{ 0x08, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00 }, // 0x8c
					{ 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00 }, // 0x8d
					{ 0x10, 0x10, 0x20, 0xc0, 0x00, 0x00, 0x00, 0x00 }, // 0x8e
					{ 0x00, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x08, 0x08 }, // 0x8f

					{ 0x00, 0x00, 0x00, 0x07, 0x08, 0x10, 0x10, 0x10 }, // 0x90
					{ 0x90, 0x90, 0x90, 0x88, 0x47, 0x40, 0x30, 0x0f }, // 0x91
					{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0xff }, // 0x92
					{ 0x10, 0x10, 0x10, 0x08, 0x07, 0x00, 0x00, 0x00 }, // 0x93
					{ 0x08, 0x08, 0x08, 0x10, 0xe0, 0x00, 0x00, 0x00 }, // 0x94
					{ 0x09, 0x09, 0x09, 0x11, 0xe2, 0x02, 0x0c, 0xf0 }, // 0x95
					{ 0x00, 0x00, 0x00, 0x00, 0x0f, 0x08, 0x08, 0x09 }, // 0x96
					{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x01, 0x01, 0xff }, // 0x97
					{ 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x80, 0xff }, // 0x98
					{ 0x00, 0x00, 0x00, 0x00, 0xf0, 0x10, 0x10, 0x90 }, // 0x99
					{ 0x09, 0x08, 0x08, 0x0f, 0x00, 0x00, 0x00, 0x00 }, // 0x9a
					{ 0x90, 0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00 }, // 0x9b
					{ 0x90, 0x90, 0x90, 0x88, 0x87, 0x80, 0x80, 0x80 }, // 0x9c
					{ 0x09, 0x09, 0x09, 0x11, 0xe1, 0x01, 0x01, 0x01 }, // 0x9d
					{ 0x80, 0x80, 0x80, 0x87, 0x88, 0x90, 0x90, 0x90 }, // 0x9e
					{ 0x01, 0x01, 0x01, 0xe1, 0x11, 0x09, 0x09, 0x09 }, // 0x9f

					{ 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00 }, // 0xa0
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00 }, // 0xa1
					{ 0x3c, 0x7e, 0xff, 0xff, 0xff, 0xff, 0x7e, 0x3c }, // 0xa2
					{ 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x6e, 0x46, 0x00 }, // 0xa3
					{ 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x76, 0x62, 0x00 }, // 0xa4
					
					{ 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7b, 0x31, 0x00 }, // 0xa5
					{ 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xde, 0x8c, 0x00 }, // 0xa6

					{ 0x00, 0x00, 0x00, 0x00, 0x03, 0x07, 0x07, 0x07 }, // 0xa7 eyes right
					{ 0x00, 0x00, 0x00, 0x00, 0x0c, 0x9e, 0x9e, 0x9e }, // 0xa8
					{ 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xa9
					{ 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xaa

					{ 0x00, 0x00, 0x00, 0x00, 0x30, 0x79, 0x79, 0x79 }, // 0xab eyes left
					{ 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xe0, 0xe0 }, // 0xac
					{ 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xad
					{ 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xae
					
					{ 0x00, 0x00, 0x0c, 0x1e, 0x1e, 0x1e, 0x0c, 0x00 }, // 0xaf eyes up
					{ 0x00, 0x00, 0x30, 0x78, 0x78, 0x78, 0x30, 0x00 }, // 0xb0

					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x1e, 0x1e }, // 0xb1 eyes down
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0x78 }, // 0xb2
					{ 0x1e, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xb3
					{ 0x78, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xb4

					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01 }, // 0xb5 pupils right
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x86 }, // 0xb6

					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x61 }, // 0xb7 pupils left
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80 }, // 0xb8
					
					{ 0x00, 0x00, 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00 }, // 0xb9 pupils up
					{ 0x00, 0x00, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00 }, // 0xba
					
					{ 0x0c, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xbb pupils down
					{ 0x30, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xbc


					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00 }, // 0xbd
					{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00 }, // 0xbe
					{ 0x00, 0x19, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xbf
					{ 0x00, 0x98, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00 }, // 0xc0

					d_zero_char, // 0xc1
					d_zero_char, // 0xc2
					d_zero_char, // 0xc3
					d_zero_char, // 0xc4
					d_zero_char, // 0xc5
					d_zero_char, // 0xc6
					d_zero_char, // 0xc7
					d_zero_char, // 0xc8
					d_zero_char, // 0xc9
					d_zero_char, // 0xca
					d_zero_char, // 0xcb
					d_zero_char, // 0xcc
					d_zero_char, // 0xcd
					d_zero_char, // 0xce
					d_zero_char, // 0xcf

					d_zero_char, // 0xd0
					d_zero_char, // 0xd1
					d_zero_char, // 0xd2
					d_zero_char, // 0xd3
					d_zero_char, // 0xd4
					d_zero_char, // 0xd5
					d_zero_char, // 0xd6
					d_zero_char, // 0xd7
					d_zero_char, // 0xd8
					d_zero_char, // 0xd9
					d_zero_char, // 0xda
					d_zero_char, // 0xdb
					d_zero_char, // 0xdc
					d_zero_char, // 0xdd
					d_zero_char, // 0xde
					d_zero_char, // 0xdf

					d_zero_char, // 0xe0
					d_zero_char, // 0xe1
					d_zero_char, // 0xe2
					d_zero_char, // 0xe3
					d_zero_char, // 0xe4
					d_zero_char, // 0xe5
					d_zero_char, // 0xe6
					d_zero_char, // 0xe7
					d_zero_char, // 0xe8
					d_zero_char, // 0xe9
					d_zero_char, // 0xea
					d_zero_char, // 0xeb
					d_zero_char, // 0xec
					d_zero_char, // 0xed
					d_zero_char, // 0xee
					d_zero_char, // 0xef

					d_zero_char, // 0xf0
					d_zero_char, // 0xf1
					d_zero_char, // 0xf2
					d_zero_char, // 0xf3
					d_zero_char, // 0xf4
					d_zero_char, // 0xf5
					d_zero_char, // 0xf6
					d_zero_char, // 0xf7
					d_zero_char, // 0xf8
					d_zero_char, // 0xf9
					d_zero_char, // 0xfa
					d_zero_char, // 0xfb
					d_zero_char, // 0xfc
					d_zero_char, // 0xfd
					d_zero_char, // 0xfe
					{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } // 0xff
				};

				return pacman::font::create_from_data_array((const uint8_t*)default_font_data, 256, 0);
			}
		}

		void set_palette(console_t* console)
		{
			pacman::console::palette_t palette =
			{
				0x000000ff,		// black
				0x2121deff,		// wall (blue)
				0xffff00ff,		// pacman (yellow)
				0xff0000ff,		// blinky (red)
				0xffb8deff,		// pinky (pink)
				0x00ffdeff,		// inky (cyan)
				0xffbb47ff,		// clyde (orange)
				0xffbb97ff,		// dot 
				0xde9747ff,		// cherry_stem (brown),
				0xdededeff,		// text (white)		
				0xe0ddffff,		// eyes,
				0x000000ff,		// undef_11,
				0x000000ff,		// undef_12,
				0x000000ff,		// undef_13,
				0x000000ff,		// undef_14,
				0x000000ff,		// undef_15
			};
			pacman::console::palette::set(console, palette);
		}
	}
}
