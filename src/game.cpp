#include "pacman.h"

namespace pacman
{
	typedef struct game_t
	{
		int8_t grid[game::grid::width * game::grid::height];
	} game_t;

	namespace game
	{
		game_t* create()
		{
			game_t* game = new game_t;
			if (game)
			{
				game::reset(game);
			}
			return game;
		}

		void destroy(game_t* game)
		{
			if (game)
			{
				delete game;
			}
		}

		void draw(console_t* console, const game_t* game)
		{
			console::palette::background::set(console, 0);
			console::palette::foreground::set(console, 15);
			console::clear(console);
			for (int8_t j = 0; j < grid::height; ++j)
			{
				for (int8_t i = 0; i < grid::width; ++i)
				{
					int8_t color = 0;
					uint8_t ch = game->grid[i + j * grid::width];

					if (ch >= 32 && ch < 0x80)
					{
						color = color::text;
					}

					if (ch >= 0x80 && ch <= 0x9f)
					{
						color = color::wall;
					}
					if (ch == 0xa1)
					{
						color = color::pinky;
					}
					if (ch == 0xa2) // big dot
					{
						color = color::dot;
					}
					if (ch == 0xa0) // dot
					{
						color = color::dot;
					}

					console::palette::background::set(console, 0);
					console::palette::foreground::set(console, color);
					console::text::out(console, ch);
				}
			}

		}

		void reset(game_t* game)
		{
			const uint8_t grid[grid::width * grid::height] = 
			{ 
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x48, 0x49, 0x47, 0x48, 0x20, 0x53, 0x43, 0x4f, 0x52, 0x45, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x30, 0x30, 0x30, 0x30, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x80, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x82, 0x83, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x84,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa2, 0x86, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x20, 0x87, 0xa0, 0x86, 0x20, 0x20, 0x87, 0xa2, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x91, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x86, 0x93, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x94, 0x87, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x95,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x86, 0x87, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x96, 0x92, 0x97, 0xa1, 0xa1, 0x98, 0x92, 0x99, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x81, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x81,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x20, 0x20, 0xa0, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x92, 0x92, 0x92, 0x92, 0x92, 0x8b, 0xa0, 0x89, 0x8b, 0x20, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0x20, 0x89, 0x8b, 0xa0, 0x89, 0x92, 0x92, 0x92, 0x92, 0x92,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x9a, 0x81, 0x81, 0x81, 0x81, 0x81, 0x81, 0x9b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x85, 0xa0, 0x86, 0x87, 0x20, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0x20, 0x86, 0x87, 0xa0, 0x88, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x80, 0x81, 0x81, 0x81, 0x81, 0x8e, 0xa0, 0x8c, 0x8e, 0x20, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0x20, 0x8c, 0x8e, 0xa0, 0x8c, 0x81, 0x81, 0x81, 0x81, 0x84,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8f, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x90, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa2, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x20, 0x20, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa2, 0x88,
				0x9c, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8b, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x89, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x9d,
				0x9e, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8d, 0x8d, 0x8f, 0x90, 0x8d, 0x8d, 0x8e, 0xa0, 0x86, 0x87, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x9f,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0x86, 0x87, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x85, 0xa0, 0x89, 0x8a, 0x8a, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8b, 0xa0, 0x86, 0x87, 0xa0, 0x89, 0x8a, 0x8a, 0x94, 0x93, 0x8a, 0x8a, 0x8a, 0x8a, 0x8b, 0xa0, 0x88,
				0x85, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x8c, 0x8e, 0xa0, 0x8c, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8d, 0x8e, 0xa0, 0x88,
				0x85, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0xa0, 0x88,
				0x91, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x92, 0x95,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
				0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20 
			};

			//const char* grid =
			//	"         HIGH SCORE         "
			//	"  00000     00000           "
			//	"                            "
			//	"abbbbbbbbbbbbcdbbbbbbbbbbbbe"
			//	"f............gh............i"
			//	"f.jkkl.jkkkl.gh.jkkkl.jkkl.i"
			//	"f*g  h.g   h.gh.g   h.g  h*i"
			//	"f.mnno.mnnno.mo.mnnno.mnno.i"
			//	"f..........................i"
			//	"f.jkkl.jl.jkkkkkkl.jl.jkkl.i"
			//	"f.mnno.gh.mnnpqnno.gh.mnno.i"
			//	"f......gh....gh....gh......i"
			//	"rssssl.gtkkl gh jkkuh.jssssv"
			//	"     f.gqnno gh mnnph.i     "
			//	"     f.gh          gh.i     "
			//	"     f.gh wsx--ysz gh.i     "
			//	"bbbbbo.mo i      f mo.mbbbbb"
			//	"      .   i      f   .      "
			//	"sssssl.jl i      f jl.jsssss"
			//	"     f.gh :bbbbbb; gh.i     "
			//	"     f.gh          gh.i     "
			//	"     f.gh jkkkkkkl gh.i     "
			//	"abbbbo.mo mnnpqnno mo.mbbbbe"
			//	"f............gh............i"
			//	"f.jkkl.jkkkl.gh.jkkkl.jkkl.i"
			//	"f.mnph.mnnno.mo.mnnno.gqno.i"
			//	"f*..gh................gh..*i"
			//	"<kl.gh.jl.jkkkkkkl.jl.gh.jk="
			//	">no.mo.gh.mnnpqnno.gh.mo.mn?"
			//	"f......gh....gh....gh......i"
			//	"f.jkkkkutkkl.gh.jkkutkkkkl.i"
			//	"f.mnnnnnnnno.mo.mnnnnnnnno.i"
			//	"f..........................i"
			//	"rssssssssssssssssssssssssssv"
			//	"                            "
			//	"                            ";


			//std::cout << "const uint8_t grid[grid::width * grid::height] = { ";

			//for (int8_t j = 0; j < pacman::game::grid::height;)
			//{
			//	for (int8_t i = 0; i < pacman::game::grid::width;)
			//	{
			//		//std::cout << "'";

			//		int32_t v = (int32_t)grid[i + j * pacman::game::grid::width];

			//		if (v >= 'a' && v <= 'z')
			//		{
			//			v = v + 0x80 - 'a';
			//		}
			//		else
			//		{
			//			if (v >= ':' && v <= '?')
			//			{
			//				v = v + 0x80 - ':' + 'z' - 'a' + 1;
			//			}
			//		}

			//		int32_t h = (v & 0xf0) >> 4;
			//		int32_t l = (v & 0x0f);

			//		std::cout << "0x" << (char)pacman::hex::to_char(h) << (char)pacman::hex::to_char(l);

			//		//std::cout << "'";

			//		++i;
			//		if (i != pacman::game::grid::width)
			//		{
			//			std::cout << ", ";
			//		}
			//	}

			//	++j;
			//	if (j != pacman::game::grid::height)
			//	{
			//		std::cout << ", " << std::endl;
			//	}
			//}
			//std::cout << " };" << std::endl;


			for (int8_t j = 0; j < grid::height; ++j)
			{
				for (int8_t i = 0; i < grid::width; ++i)
				{
					game->grid[i + j * grid::width] = grid[i + j * grid::width];
				}
			}
		}

		void set_glyph(font_t* font, int32_t index, const std::string& string)
		{
			font::glyph_t* glyph = font::glyph::get(font, index);
			if (glyph)
			{
				font::glyph::modify(glyph, string);
			}
		}

		void modify_game_font(font_t* font)
		{
			set_glyph(font, 0x20, "0000000000000000"); // empty
			set_glyph(font, 0x80, "0f30404788909090"); // wall 00
			set_glyph(font, 0x81, "ff0000ff00000000"); // wall 01
			set_glyph(font, 0x82, "ff0000e010080808"); // wall 02
			set_glyph(font, 0x83, "ff00000708101010"); // wall 03
			set_glyph(font, 0x84, "f00c02e211090909"); // wall 04
			set_glyph(font, 0x85, "9090909090909090"); // wall 05
			set_glyph(font, 0x86, "0808080808080808"); // wall 06
			set_glyph(font, 0x87, "1010101010101010"); // wall 07
			set_glyph(font, 0x88, "0909090909090909"); // wall 08
			set_glyph(font, 0x89, "0000000003040808"); // wall 09
			set_glyph(font, 0x8a, "00000000ff000000"); // wall 10
			set_glyph(font, 0x8b, "00000000c0201010"); // wall 11
			set_glyph(font, 0x8c, "0808040300000000"); // wall 12
			set_glyph(font, 0x8d, "000000ff00000000"); // wall 13
			set_glyph(font, 0x8e, "101020c000000000"); // wall 14
			set_glyph(font, 0x8f, "000000e010080808"); // wall 15
			set_glyph(font, 0x90, "0000000708101010"); // wall 16
			set_glyph(font, 0x91, "909090884740300f"); // wall 17
			set_glyph(font, 0x92, "00000000ff0000ff"); // wall 18
			set_glyph(font, 0x93, "1010100807000000"); // wall 19
			set_glyph(font, 0x94, "08080810e0000000"); // wall 20
			set_glyph(font, 0x95, "09090911e2020cf0"); // wall 21
			set_glyph(font, 0x96, "000000000f080809"); // wall 22
			set_glyph(font, 0x97, "00000000ff0101ff"); // wall 23
			set_glyph(font, 0x98, "00000000ff8080ff"); // wall 24
			set_glyph(font, 0x99, "00000000f0101090"); // wall 25
			set_glyph(font, 0x9a, "0908080f00000000"); // wall 26
			set_glyph(font, 0x9b, "901010f000000000"); // wall 27
			set_glyph(font, 0x9c, "9090908887808080"); // wall 28
			set_glyph(font, 0x9d, "09090911e1010101"); // wall 30
			set_glyph(font, 0x9e, "8080808788909090"); // wall 31
			set_glyph(font, 0x9f, "010101e111090909"); // wall 32
			set_glyph(font, 0xa0, "0000001818000000"); // dot
			set_glyph(font, 0xa1, "0000000000ffff00"); // door
			set_glyph(font, 0xa2, "3c7effffffff7e3c"); // big dot


			set_glyph(font, 0x20, "0000000000000000");
			set_glyph(font, 0x21, "183c3c3c18180018");
			set_glyph(font, 0x22, "6c6c6c0000000000");
			set_glyph(font, 0x23, "6c6cfe6cfe6c6c00");
			set_glyph(font, 0x24, "307cc0780cf83000");
			set_glyph(font, 0x25, "00c6cc183066c600");
			set_glyph(font, 0x26, "386c3876dccc7600");
			set_glyph(font, 0x27, "6060c00000000000");
			set_glyph(font, 0x28, "1830606060301800");
			set_glyph(font, 0x29, "6030181818306000");
			set_glyph(font, 0x2a, "00663cff3c660000");
			set_glyph(font, 0x2b, "003030fc30300000");
			set_glyph(font, 0x2c, "0000000000303060");
			set_glyph(font, 0x2d, "000000fc00000000");
			set_glyph(font, 0x2e, "0000000000303000");
			set_glyph(font, 0x2f, "060c183060c08000");
			set_glyph(font, 0x30, "384cc6c6c6643800");
			set_glyph(font, 0x31, "1838181818187e00");
			set_glyph(font, 0x32, "7cc60e3c78e0fe00");
			set_glyph(font, 0x33, "7e0c183c06c67c00");
			set_glyph(font, 0x34, "1c3c6cccfe0c0c00");
			set_glyph(font, 0x35, "fcc0fc0606c67c00");
			set_glyph(font, 0x36, "3c60c0fcc6c67c00");
			set_glyph(font, 0x37, "fec60c1830303000");
			set_glyph(font, 0x38, "7cc6c67cc6c67c00");
			set_glyph(font, 0x39, "7cc6c67e060c7800");
			set_glyph(font, 0x3a, "0030300000303000");
			set_glyph(font, 0x3b, "0030300000303060");
			set_glyph(font, 0x3c, "183060c060301800");
			set_glyph(font, 0x3d, "0000fc0000fc0000");
			set_glyph(font, 0x3e, "6030180c18306000");
			set_glyph(font, 0x3f, "78cc0c1830003000");
			set_glyph(font, 0x40, "7cc6dededec07800");
			set_glyph(font, 0x41, "386cc6c6fec6c600");
			set_glyph(font, 0x42, "fcc6c6fcc6c6fc00");
			set_glyph(font, 0x43, "3c66c0c0c0663c00");
			set_glyph(font, 0x44, "f8ccc6c6c6ccf800");
			set_glyph(font, 0x45, "fec0c0fcc0c0fe00");
			set_glyph(font, 0x46, "fec0c0fcc0c0c000");
			set_glyph(font, 0x47, "3e60c0cec6663e00");
			set_glyph(font, 0x48, "c6c6c6fec6c6c600");
			set_glyph(font, 0x49, "7e18181818187e00");
			set_glyph(font, 0x4a, "1e060606c6c67c00");
			set_glyph(font, 0x4b, "c6ccd8f0f8dcce00");
			set_glyph(font, 0x4c, "6060606060607e00");
			set_glyph(font, 0x4d, "c6eefefed6c6c600");
			set_glyph(font, 0x4e, "c6e6f6fedecec600");
			set_glyph(font, 0x4f, "7cc6c6c6c6c67c00");
			set_glyph(font, 0x50, "fcc6c6c6fcc0c000");
			set_glyph(font, 0x51, "7cc6c6c6decc7a00");
			set_glyph(font, 0x52, "fcc6c6cef8dcce00");
			set_glyph(font, 0x53, "78ccc07c06c67c00");
			set_glyph(font, 0x54, "7e18181818181800");
			set_glyph(font, 0x55, "c6c6c6c6c6c67c00");
			set_glyph(font, 0x56, "c6c6c6ee7c381000");
			set_glyph(font, 0x57, "c6c6d6fefeeec600");
			set_glyph(font, 0x58, "c6ee7c387ceec600");
			set_glyph(font, 0x59, "6666663c18181800");
			set_glyph(font, 0x5a, "fe0e1c3870e0fe00");
			set_glyph(font, 0x5b, "7860606060607800");
			set_glyph(font, 0x5c, "c06030180c060200");
			set_glyph(font, 0x5d, "7818181818187800");
			set_glyph(font, 0x5e, "10386cc600000000");
			set_glyph(font, 0x5f, "00000000000000ff");

			set_glyph(font, 0x60, "3c4299a1a199423c"); //copyright symbol

			set_glyph(font, 0x61, "00071f3f3f7f7f7f"); // top left
			set_glyph(font, 0x62, "00e0f8fcfcfefefe"); // top right
			set_glyph(font, 0x63, "7f7f7f3f3f1f0700"); // bottom left
			set_glyph(font, 0x64, "fefefefcfcf8e000"); // bottom right



		}



		void set_palette(console_t* console)
		{
			console::palette_t palette =
			{
				0x000000ff,		// black
				0x2121deff,		// wall (blue)
				0xffff00ff,		// pacman (yellow)
				0xff0000ff,		// blinky (red)
				0xffb8deff,		// pinky (pink)
				0x00ffdeff,		// inky (cyan)
				0xffbb47ff,		// clyde (orange)
				0xffbb97ff,		// dot 
				0xde9747ff,		// cherry_stem (brown),
				0xdededeff,		// text (white)		
				0x000000ff,		// undef_10,
				0x000000ff,		// undef_11,
				0x000000ff,		// undef_12,
				0x000000ff,		// undef_13,
				0x000000ff,		// undef_14,
				0x000000ff,		// undef_15
			};
			console::palette::set(console, palette);
		}
	}
}
